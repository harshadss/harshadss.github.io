<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Harshad Saykhedkar</title>
    <link>https://harshadss.github.io/posts/</link>
    <description>Recent content in Posts on Harshad Saykhedkar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Mar 2023 21:26:21 +0530</lastBuildDate><atom:link href="https://harshadss.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning from First Principles</title>
      <link>https://harshadss.github.io/posts/first_principles_knowledge/</link>
      <pubDate>Thu, 23 Mar 2023 21:26:21 +0530</pubDate>
      
      <guid>https://harshadss.github.io/posts/first_principles_knowledge/</guid>
      <description>We know that a lack of understanding feels like chaos, muddled thinking and an uncomfortable lack of confidence about some concept. In short, it is the inability to debug our brain and take it from a question to an answer. Let us call this not having understanding driven by &amp;ldquo;first principles&amp;rdquo;. It often leads to a subtle but critical problem: being wrong and not being able to spot it.
The anecdote to this state of chaos is learning from first principles.</description>
    </item>
    
    <item>
      <title>That kind of a book</title>
      <link>https://harshadss.github.io/posts/that_kind_of_a_book/</link>
      <pubDate>Tue, 30 Jun 2020 21:46:18 +0530</pubDate>
      
      <guid>https://harshadss.github.io/posts/that_kind_of_a_book/</guid>
      <description>I&amp;rsquo;ve often had this experience: certain technical topics look extremely difficult to break into. No matter how many standard resources and popular content that you read through, every one of them seems to speak a foreign language. I&amp;rsquo;ve felt this while studying topics like complex numbers, Fourier&amp;rsquo;s transform, relativity, to name a few.
I am of the opinion that either I&amp;rsquo;m too dumb or writers of many popular expositions on such topics have not understood it clearly.</description>
    </item>
    
    <item>
      <title>Skeptics Guide To ML Hype and Excitement</title>
      <link>https://harshadss.github.io/posts/ml_hype_cycle_and_research/</link>
      <pubDate>Tue, 15 Oct 2019 15:19:02 +0530</pubDate>
      
      <guid>https://harshadss.github.io/posts/ml_hype_cycle_and_research/</guid>
      <description>Machine learning field at the moment seems to be in pinnacle of hype cycle. A researcher or a lab or organization creates some marginal improvement over existing status quo in some narrow area, they self-publish it as paper with some preposturous headline and then the circle jerk starts.
I have a personal heuristics to deal with such hype cycle based on following observations.
Observations Not All Papers are Created Equal In most of the universities it is mandatory for a master&amp;rsquo;s and PhD student to publish some work.</description>
    </item>
    
    <item>
      <title>Musings on Paul Lockhart&#39;s measurement</title>
      <link>https://harshadss.github.io/posts/musings_on_paul_lockhart_measurement/</link>
      <pubDate>Tue, 27 Aug 2019 15:03:28 +0530</pubDate>
      
      <guid>https://harshadss.github.io/posts/musings_on_paul_lockhart_measurement/</guid>
      <description>Life is short, so one should read only the books that give you a new perspective on the world life and all that. This is a central tenet of my reading these days. Considering that I have probably lost more than half of my active life already, books with repetition of trivialities bother me.
I stumbled on Paul Lockhart while going through the black hole of learning maths. His essay mathematician&amp;rsquo;s lament is very famous.</description>
    </item>
    
    <item>
      <title>Interesting links: geometric algebra</title>
      <link>https://harshadss.github.io/posts/geometric_algebra_fascination/</link>
      <pubDate>Wed, 26 Jun 2019 16:29:10 +0530</pubDate>
      
      <guid>https://harshadss.github.io/posts/geometric_algebra_fascination/</guid>
      <description>The topic of geometric algebra is a new fascination for me. I first read about David Hestenes while reading Bret Victor&amp;rsquo;s kill maths project. Then got a copy of David Hestenes&amp;rsquo; new foundations of classical mechanics book. One thing led to another and then I ended up reading an old out of print book by Clifford called common sense in exact sciences.
The basic premise of geometric algebra seems fascinating to me: a universal and simple mathematical theory for a wide variety of applications in Physics.</description>
    </item>
    
    <item>
      <title>Interesting link: quantum reconstruction</title>
      <link>https://harshadss.github.io/posts/interesting_link_quantum_reconstruction/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/interesting_link_quantum_reconstruction/</guid>
      <description>Studying quantum mechanics often gives you an eerie feeling. I tend to feel that something very adhoc is happening. Reading about special relativity is different for example: you start with some reasonable axioms and then the maths kind of follows. But not so a case with quantum mechanics. I&amp;rsquo;ve tried to read many books to get sort of a big picture view of what the hell is happening to no avail.</description>
    </item>
    
    <item>
      <title>Found interesting link: Introduction</title>
      <link>https://harshadss.github.io/posts/found_interesting_link_introduction/</link>
      <pubDate>Tue, 07 May 2019 14:39:08 +0530</pubDate>
      
      <guid>https://harshadss.github.io/posts/found_interesting_link_introduction/</guid>
      <description>I sometimes long for those days of internet when you&amp;rsquo;d land on someone&amp;rsquo;s personal page where they&amp;rsquo;d document hard to find links about some (technical) subject matter and some commentary on them. Discovery of such links often meant that that your understanding or interest in certain subject would completely change. I also loved the painstaking effort someone would make to find and then document information for an unknown (web) traveller. There is a kind of romantic hope in doing this, similar to human beings putting out Voyagers spacecrafts with those golden record.</description>
    </item>
    
    <item>
      <title>When (not) to use deep learning</title>
      <link>https://harshadss.github.io/posts/when_to_use_deep_learning/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/when_to_use_deep_learning/</guid>
      <description>I&amp;rsquo;ve documented my disdain for using &amp;lsquo;deep learning as a hammer looking for nails in every corner&amp;rsquo; in few other entries on this blog. Taking a less cynical and acerbic view, I want to focus on when deep learning can be a good starting point and when it is not useful as starting point.
First to clarify bit of terminology. Deep learning is a catch-all term used in popular data science these days.</description>
    </item>
    
    <item>
      <title>Where AI will Change World</title>
      <link>https://harshadss.github.io/posts/where_ai_will_change_world/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/where_ai_will_change_world/</guid>
      <description>Andrew Ng wrote insightful article in HBR a while ago about what an AI can and cannot do. He highlights that if there&amp;rsquo;s a mental task that a human being can do in few seconds, you can probably automate it.
In my opinion, these types of problems have a following structure,
Single person decisions: these decisions are often replacing decision making of single human being. Scale factor: You need AI to help you in tons of such decisions in order to make meanigful impact.</description>
    </item>
    
    <item>
      <title>Sane Choices for Small Machine Learning Teams: Part 1</title>
      <link>https://harshadss.github.io/posts/sane_ml_stack_1/</link>
      <pubDate>Mon, 13 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/sane_ml_stack_1/</guid>
      <description>Data scientists and machine learning engineers in small and medium businesses often end up over-engineering their machine learning workflow and stack. In a series of posts below, I will share a few tricks learnt over the years related to choosing right components of the ML pipeline.
In this first post, let us go through mistakes small teams can make. Later posts will explain possible solutions.
Preferring Generalized Solutions Many big companies will perfect a very general solution to machine learning problems by investing obscene amount of resources.</description>
    </item>
    
    <item>
      <title>Curse of ML and DL on Stack Exchange</title>
      <link>https://harshadss.github.io/posts/curse_of_ml_stackoverflow/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/curse_of_ml_stackoverflow/</guid>
      <description>I have come across two distinct flavours of beginner behaviours on stack-exchange site related to data science. I believe they are symptoms representing what is the larger problem ailing field of data science. Let us go through the symptoms first. My tone in this article is extremely acerbic because I feel strongly for my field.
Deep Learning Voodo Problem Someone will post a problem like, &amp;ldquo;I am trying to fit (some complex deep learning architecture) model on (a bad problem for starting with DL).</description>
    </item>
    
    <item>
      <title>Mathematical Epiphanies 2: Differential Equations</title>
      <link>https://harshadss.github.io/posts/mathematical_epiphanies_differential_equations/</link>
      <pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/mathematical_epiphanies_differential_equations/</guid>
      <description>Click here for introduction to this series and motivation.
Differential Equations An equation is about balancing two sides of a (weight) balance scale. The equations that we study in school (x + 4 = 9) are about finding the number which will balance the scale. But there could be equations for which solution which balances things is a function and not a number! Specifically, you could have equations which relate a change in certain quantity with respect to that quantity.</description>
    </item>
    
    <item>
      <title>Mathematical Epiphanies 1: Linear Systems &amp; Fourier Transform</title>
      <link>https://harshadss.github.io/posts/mathematical_epiphanies_linear_systems_fourier/</link>
      <pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/mathematical_epiphanies_linear_systems_fourier/</guid>
      <description>Click here for introduction to this series and motivation.
Linear Algebra Basics There are two ways to look at matrices. One view is about a matrix representing some data (to be covered in later part of this series) Another view is: matrix encodes the operation of a linear system on its inputs. In this (3) view, a matrix represents a linear map. Matrix-vector multiplication is taking a vector represented in one coordinate system and transforming it to vector in another co-ordinate systems.</description>
    </item>
    
    <item>
      <title>Mathematical Epiphanies 0: Introduction</title>
      <link>https://harshadss.github.io/posts/mathematical_epiphanies_introduction/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/mathematical_epiphanies_introduction/</guid>
      <description>I had to study a lot of maths in higher secondary and engineering. There were 2 maths subjects for 2 years after secondary school and 3 maths subjects in the first two years of engineering. Despite studying so much maths, graduate school was a rude shock for me. I just couldn&amp;rsquo;t wrap my head around of a lot of lectures.
The problem was the way maths was taught. Most of the teachers taught maths as an end in itself, mostly devoid of the most important question: &amp;ldquo;why&amp;rdquo;?</description>
    </item>
    
    <item>
      <title>Readings in Human Body, Evolution and Biology</title>
      <link>https://harshadss.github.io/posts/studying_body_biology/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/studying_body_biology/</guid>
      <description>Throughout my school life I tried to stay away from biology studies. I specifically chose studying physics and maths instead of biology in higher secondary school. Even during secondary school, science 1 generally had physics and chemistry whereas science 2 contained protozoans and all other wiggling beasts. Guess who barely got over line in science 2.
The logic for a high school students in India was simple. You chose biology if you wanted to be a doctor (or do a research in microbiology) which meant spending many years studying and daddy needs to have lot of money to get you into medical school.</description>
    </item>
    
    <item>
      <title>Learnings from Teaching Machine Learning</title>
      <link>https://harshadss.github.io/posts/learnings_from_teching_ml/</link>
      <pubDate>Tue, 19 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/learnings_from_teching_ml/</guid>
      <description>I have been teaching machine learning to programmers since some time. I started this activity in 2013 and till date I have conducted 10+ hands on workshops.
All these workshops were typically 3-3.5 hours long and covered some theory, coding examples through Python (ocassionally R) and interactive discussions. They were attended by 10-50 programmers.
Here are some learnings from this teaching activity, in no particular order. Many of them were in fact goof-ups that I did at one point of time, so these are indeed lessons from trenches.</description>
    </item>
    
    <item>
      <title>Obstacles in Taking Machine Learning to Production</title>
      <link>https://harshadss.github.io/posts/problems_in_deploying_ml/</link>
      <pubDate>Tue, 25 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/problems_in_deploying_ml/</guid>
      <description>Well the title is intentionally exaggerating. May not the biggest but certainly one of the most important area of friction in taking machine learning to production.
Scenario Imagine that you/your data scientist has written a functional machine learning pipeline in Python today. And by pipeline I mean data transformation as well as prediction code. For example, you could have a data which is mix of text and numeric features. You might do some text processing to generate n-gram features with some custom filters on the text.</description>
    </item>
    
    <item>
      <title>Practical Common Lisp / Clojure: 5</title>
      <link>https://harshadss.github.io/posts/practical_common_lisp_5/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/practical_common_lisp_5/</guid>
      <description>In these posts I’m studying the book Practical Common Lisp by Peter Seibel and coding the examples in Clojure. Aim: studying clojure and reading this fantastic book can be accessed online here.
In part 4 of this post, we saw the code from chapter 9 of the book about creating a test framework.
In this post, we continue the code of chapter 9 and iron out few kinks in our unit test framework.</description>
    </item>
    
    <item>
      <title>Practical Common Lisp / Clojure: 4</title>
      <link>https://harshadss.github.io/posts/practical_common_lisp_4/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/practical_common_lisp_4/</guid>
      <description>In these posts I’m studying the book Practical Common Lisp by Peter Seibel and coding the examples in Clojure. Aim: studying clojure and reading this fantastic book can be accessed online here.
In part 3 of this post, we saw the code from chapter 3 of the book in which we implemented an in-memory documentish database with select, where and update.
Now I am tackling the code from chapter 9, building a test framework.</description>
    </item>
    
    <item>
      <title>Practical Common Lisp / Clojure: 3</title>
      <link>https://harshadss.github.io/posts/practical_common_lisp_3/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/practical_common_lisp_3/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Practical Common Lisp / Clojure: 2</title>
      <link>https://harshadss.github.io/posts/practical_common_lisp_2/</link>
      <pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/practical_common_lisp_2/</guid>
      <description>In these posts I’m studying the book Practical Common Lisp by Peter Siebel and coding the examples in Clojure. Aim: studying clojure and reading this fantastic book can be accessed online here.
In part 1 of this post, we went through creating a single database using list and maps.
Chapter 3 continued Looking at database contents In this section, Peter teaches string formatting for CL. Using string formatting, a nicer way to look at db contents is tried.</description>
    </item>
    
    <item>
      <title>Practical Common Lisp / Clojure: 1</title>
      <link>https://harshadss.github.io/posts/practical_common_lisp_1/</link>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/practical_common_lisp_1/</guid>
      <description>In these posts I’m studying the book Practical Common Lisp by Peter Siebel and coding the examples in Clojure. Aim: studying clojure and reading this fantastic book can be accessed online here.
Chapter 3 of the book We try to implement a simple database for storing information about CDs that we own.
CD &amp;amp; Records First decision is how do you store the details for a single CD. Peter says that we (for now) want to store 4 properties about a CD.</description>
    </item>
    
    <item>
      <title>IPython is powerful!</title>
      <link>https://harshadss.github.io/posts/ipython_is_powerful/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/ipython_is_powerful/</guid>
      <description>When you are working with a task where you are interactively building a solution, you need a lot of focus. Most of the work that I do fits into this category. Interactively building solutions to larger problems by solving smaller problems is pioneered by data first tools like Clojure and R.
The first step to achieving the focus required in such interactive work is to remove distractions and complexities from your environments as much as possible.</description>
    </item>
    
    <item>
      <title>Cheklist Manifesto &amp; Thinking Fast and Slow</title>
      <link>https://harshadss.github.io/posts/cheklist_manifesto_ruminations/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/cheklist_manifesto_ruminations/</guid>
      <description>I read ‘the checklist manifesto’ by Atul Gawande. I am a firm believer in books and advice in general from anyone in practice oriented profession: doctors, investors (not speculators), pilots and so on. The professinals in these fields have generally a large skin in the game (money, reputation, their own life), making their advice worthy as compared to academic advise. The checklist book was then just the right fit for a lazy afternoon reading at once.</description>
    </item>
    
    <item>
      <title>Testing Literate Emacs Config</title>
      <link>https://harshadss.github.io/posts/testing_literate_emacs_config/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/testing_literate_emacs_config/</guid>
      <description>Some time back, I wrote my Emacs configuration in an org mode file. The whole setup is documented here. The objective was twofold: one to make it readable to my dumb brain when I open it six months later, second was to make it reproducible on another machine quickly. Say, if something unforseen was to happen to my good ol Dell Vostro machine, what with the configuration safe on Github and all that, I can have my new machine with the Emacs setup very fast and without splitting hair.</description>
    </item>
    
    <item>
      <title>Hello, world!</title>
      <link>https://harshadss.github.io/posts/hello_world/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/hello_world/</guid>
      <description>This is just a first post on this blog. Hello, world!</description>
    </item>
    
    <item>
      <title>Learning awk is useful!</title>
      <link>https://harshadss.github.io/posts/learning_awk/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://harshadss.github.io/posts/learning_awk/</guid>
      <description>I have been working with Unix (Linux to be precise) command line since a long time. But I had always avoided learning about Unix power tools like awk, sed. Quick exploratory analysis of data in a tabular/csv form is daily routine for me. My tool of choice for this work is either R or Python. I used to wonder about the utility of tool like awk. But recently I found myself using awk for some specific use cases.</description>
    </item>
    
  </channel>
</rss>
